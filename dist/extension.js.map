{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://codetemplate/./src/plugin.ts","webpack://codetemplate/external commonjs \"vscode\"","webpack://codetemplate/external node-commonjs \"util\"","webpack://codetemplate/webpack/bootstrap","webpack://codetemplate/./src/extension.ts"],"sourcesContent":["\r\nimport { TextDecoder, TextEncoder } from 'util';\r\nimport * as vscode from 'vscode';\r\nimport * as fs from 'fs/promises';\r\n// \r\n\r\n\r\ninterface Message {\r\n    event: string\r\n    [key: string]: any\r\n}\r\ninterface VarMap {\r\n    [key: string]: any\r\n}\r\n\r\nclass CodeTemplate {\r\n    private _panel: vscode.WebviewPanel | undefined;\r\n    private _dirUri: vscode.Uri | undefined;\r\n    private _targetDirUri: vscode.Uri | undefined;\r\n    constructor() {\r\n\r\n    }\r\n    setTagetDir(targetDirUri: vscode.Uri | undefined) {\r\n        this._targetDirUri = targetDirUri;\r\n    }\r\n    async createWebview(context: vscode.ExtensionContext) {\r\n        const panel = vscode.window.createWebviewPanel(\"codetemplate\", \"code template\", vscode.ViewColumn.One, {\r\n            enableScripts: true,\r\n            retainContextWhenHidden:true,\r\n\r\n        });\r\n        const cssUri = panel.webview.asWebviewUri(vscode.Uri.joinPath(context.extensionUri, 'media', 'view.css'));\r\n        const scriptUri = panel.webview.asWebviewUri(vscode.Uri.joinPath(context.extensionUri, 'media', 'view.js'));\r\n        panel.webview.html = `\r\n            <!DOCTYPE html>\r\n            <html lang=\"en\">\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                <title>Cat Coding</title>\r\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"${cssUri}\">\r\n            </head>\r\n            <body>\r\n                <h1 class=\"red\"\">Code Template</h1>\r\n                <div id=\"root\">\r\n                    <div id=\"template_parent\" class=\"flexline\">\r\n                        <input disabled></input>\r\n                        <button>select template floder</button>\r\n                    </div>\r\n\r\n                    <div id=\"output_parent\" class=\"flexline\">\r\n                        <input disabled></input>\r\n                        <button>select output floder</button>\r\n                    </div>\r\n                    \r\n                    <div id=\"author_parent\" class=\"input_desc\">\r\n                        <div>AUTHOR</div>\r\n                        <input></input>\r\n                    </div>\r\n                    <div id=\"time_parent\" class=\"input_desc\">\r\n                        <div>TIME</div>\r\n                        <input></input>\r\n                    </div>\r\n                    <div id=\"tag_parent\" class=\"tab\">\r\n\r\n                    </div>\r\n                    <div id=\"menu_parent\" class=\"tab\">\r\n\r\n                    </div>\r\n                    <div id=\"content_parent\" class=\"input_desc\">\r\n\r\n                    </div>\r\n\r\n                    <div id=\"btn_parent\">\r\n                        <button id=\"create\">create</button>\r\n                        <button id=\"cancel\">cancel</button>\r\n                    </div>\r\n\r\n                </div>\r\n                <script  src=\"${scriptUri}\"></script>\r\n            </body>\r\n            </html>\r\n        `;\r\n\r\n        panel.webview.onDidReceiveMessage(message => {\r\n            switch (message.event) {\r\n                case 'openTemplateFloder':\r\n                    this.openCodeTemplateFloder();\r\n                    break;\r\n                case \"openOutputFloder\":\r\n                    this.openOutputFloder();\r\n                    break;\r\n                case \"loadTagContent\":\r\n                    this.readTagContent(message.tag);\r\n                    break;\r\n                case \"createTemplate\":\r\n                    this.createTempate(message).catch(err=>{\r\n                        console.error(err.toString());\r\n                        vscode.window.showErrorMessage(err.toString());\r\n                    });\r\n                    this._panel?.dispose();\r\n                    break;\r\n                case \"cancelCreate\":\r\n                    this._panel?.dispose();\r\n                    break;\r\n                case \"showMessage\":\r\n                    vscode.window.showInformationMessage(message.msg);\r\n                    break;  \r\n            }\r\n        }, undefined, context.subscriptions);\r\n\r\n        this._panel = panel;\r\n\r\n        this.reEnterWebView();\r\n       \r\n    }\r\n\r\n    reEnterWebView(){\r\n        let author = vscode.workspace.getConfiguration().get(\"codetemplate.author\");\r\n        this._panel?.webview.postMessage({ event: \"onCreateWebview\", targetDir: this._targetDirUri?.path, author:author });\r\n        this.readTemplateDir(undefined);\r\n    }\r\n\r\n    async readConfigByUri(fileUri: vscode.Uri) {\r\n        let content = await vscode.workspace.fs.readFile(fileUri);\r\n        let cObj = JSON.parse(new TextDecoder().decode(content));\r\n        return cObj;\r\n    }\r\n\r\n    async readTagContent(tag: string) {\r\n        if (!this._dirUri) {\r\n            return;\r\n        }\r\n        let fileUri = vscode.Uri.joinPath(this._dirUri, tag, \"config.json\");\r\n        let cObj;\r\n        cObj = await this.readConfigByUri(fileUri).catch(err => {\r\n            vscode.window.showErrorMessage(\" error : \" + err.toString());\r\n            cObj = null;\r\n        });\r\n        this.postMessage({\r\n            event: \"loadTagContentReturn\",\r\n            content: cObj,\r\n            tag: tag\r\n        });\r\n    }\r\n\r\n    async openCodeTemplateFloder() {\r\n        const options: vscode.OpenDialogOptions = {\r\n            canSelectMany: false,\r\n            canSelectFiles: false,\r\n            canSelectFolders: true,\r\n            title: 'Open Code Template Folder',\r\n        };\r\n        let selected = await vscode.window.showOpenDialog(options);\r\n        if (selected) {\r\n            let dirUri = selected[0];\r\n            setTimeout(() => {\r\n                vscode.workspace.getConfiguration().update(\"codetemplate.templateDir\", dirUri.path, true);\r\n                this.readTemplateDir(dirUri.path);\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    async openOutputFloder() {\r\n        const options: vscode.OpenDialogOptions = {\r\n            canSelectMany: false,\r\n            canSelectFiles: false,\r\n            canSelectFolders: true,\r\n            title: 'Open Code Template Folder',\r\n        };\r\n        let selected = await vscode.window.showOpenDialog(options);\r\n        if (selected) {\r\n            let dirUri = selected[0];\r\n            this.postMessage({ event: \"selectOutputPath\", targetDir: dirUri.path });\r\n        }\r\n    }\r\n\r\n    async readTemplateDirByString(path: string) {\r\n        if(path === \"\" || !path){\r\n            return []\r\n        }\r\n        let dirUri = vscode.Uri.file(path);\r\n        this._dirUri = dirUri;\r\n        let dirs = await vscode.workspace.fs.readDirectory(dirUri);\r\n        let rets = [];\r\n        if (dirs) {\r\n            for (let v of dirs) {\r\n                if (v[1] === 2 && v[0].charAt(0) !== \".\") {\r\n                    rets.push(v[0]);\r\n                }\r\n\r\n            }\r\n        }\r\n        return rets;\r\n    }\r\n\r\n    async readTemplateDir(dirPath: string | undefined) {\r\n        if (!this._panel) {\r\n            return;\r\n        }\r\n        if (!dirPath) {\r\n            dirPath = String(vscode.workspace.getConfiguration().get(\"codetemplate.templateDir\"));\r\n        }\r\n\r\n        let isInvalidDir = false;\r\n        let message: Message = {\r\n            event: \"refreshTemplateDir\",\r\n        };\r\n        if (dirPath !== undefined || dirPath !== \"\") {\r\n            let dirs = await this.readTemplateDirByString(dirPath).catch(err => {\r\n                console.log(\"can not find template dir\");\r\n                isInvalidDir = true;\r\n            });\r\n            message.dirs = dirs;\r\n        } else {\r\n            isInvalidDir = true;\r\n        }\r\n        message.dirPath = dirPath;\r\n        message.isInvalidDir = isInvalidDir;\r\n        this.postMessage(message);\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        if (!this._panel) {\r\n            return;\r\n        }\r\n        this._panel.webview.postMessage(message);\r\n    }\r\n\r\n\r\n    async replaceVar(content: string, vars: VarMap) {\r\n        let stringArr = [];\r\n        let state = 0; // $ \r\n        let contentLen = content.length;\r\n        let c, nextC;\r\n        let startIndex = 0;\r\n        for (let i = 0; i < contentLen; i++) {\r\n            c = content.charAt(i);\r\n            if (state === 0) {\r\n                // normal  state\r\n                if (c === '$') {\r\n                    nextC = content.charAt(i + 1);\r\n                    if (nextC === \"{\") {\r\n                        // switch var read\r\n                        state = 1;\r\n                        stringArr.push(content.substring(startIndex, i));\r\n                        startIndex = i + 2;\r\n                    }\r\n                }\r\n            } else if (state === 1) {\r\n                // var state\r\n                if (c === '}') {\r\n                    let varName = content.substring(startIndex, i);\r\n                    if (vars.hasOwnProperty(varName)) {\r\n                        stringArr.push(vars[varName]);\r\n                    } else {\r\n                        stringArr.push(\"${undefined}\");\r\n                        console.warn(\"can not find varname \", varName);\r\n                    }\r\n                    state = 0;\r\n                    startIndex = i + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (state === 1) {\r\n            let varName = content.substring(startIndex, contentLen);\r\n            stringArr.push(\"${\" + varName);\r\n        } else {\r\n            stringArr.push(content.substring(startIndex, contentLen));\r\n        }\r\n        return stringArr.join(\"\");\r\n    }\r\n\r\n\r\n    async checkFileIsExist(outputUri: vscode.Uri) {\r\n        let isExist = true;\r\n        try {\r\n            await vscode.workspace.fs.stat(outputUri);\r\n        }catch(err){\r\n            isExist = false;\r\n        }\r\n        return isExist;\r\n    }\r\n    async handleOneFile(srcDir: vscode.Uri, name:string, vars: VarMap, outputDir: vscode.Uri) {\r\n        console.log(srcDir.path, name, outputDir.path);\r\n        let fileUri = vscode.Uri.joinPath(srcDir, name);\r\n        let unt8Arr = await vscode.workspace.fs.readFile(fileUri);\r\n        let content = new TextDecoder().decode(unt8Arr);\r\n\r\n        let warpIndex = content.indexOf(\"\\n\");\r\n        let firstLine;\r\n        if (warpIndex !== -1) {\r\n            firstLine = content.substring(0, warpIndex);\r\n        }\r\n        firstLine = firstLine ? firstLine.trim() : content.trim();\r\n        let newName = name;\r\n        if (/^__.*\\$\\{.*\\}.*__$/.test(firstLine)) {\r\n            if(warpIndex !== -1){\r\n                content = content.substring(warpIndex+1, content.length);\r\n            }\r\n            newName = await this.replaceVar(firstLine, vars);\r\n            newName = newName.substring(2, newName.length - 2);\r\n        }\r\n\r\n        let outputContent = await this.replaceVar(content, vars);\r\n        let outputUri = vscode.Uri.joinPath(outputDir, newName);\r\n        \r\n        // console.log(vscode.FileSystemError.FileExists(outputUri))\r\n        \r\n        let isExist = await this.checkFileIsExist(outputUri);\r\n        \r\n        if(isExist){\r\n            throw new Error(`\"file already exist!\" ${outputUri.path}`);\r\n        }\r\n        // filehandler\r\n        console.log(\"==========write==>>\", outputUri.path);\r\n        await vscode.workspace.fs.writeFile(outputUri, new TextEncoder().encode(outputContent));\r\n    }\r\n    async handleDir(dirUri: vscode.Uri, vars: VarMap, outputUri: vscode.Uri) {\r\n        // if (!vscode.FileSystemError.FileExists(outputUri)) {\r\n        //     vscode.workspace.fs.createDirectory(outputUri)\r\n        // }\r\n        let dirs = await vscode.workspace.fs.readDirectory(dirUri);\r\n        if (dirs) {\r\n            for (let v of dirs) {\r\n                if (v[1] === 1) {\r\n                    // 文件\r\n                    await this.handleOneFile(dirUri, v[0], vars, outputUri);\r\n                } else if (v[1] === 2) {\r\n                    //文件夹\r\n                   await this.handleDir(vscode.Uri.joinPath(dirUri, v[0]), vars, vscode.Uri.joinPath(outputUri, v[0]));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async createTempate(createParams: Message) {\r\n        console.log(createParams);\r\n        let config = createParams.config;\r\n        let outputUri = vscode.Uri.file(createParams.targetPath);\r\n        let varMap = createParams.vars;\r\n        let srcUri = vscode.Uri.joinPath(vscode.Uri.file(createParams.templatePath), createParams.tag);\r\n\r\n        let author = vscode.workspace.getConfiguration().get(\"codetemplate.author\");\r\n        if((author === \"\" || author === undefined) && varMap[\"AUTHOR\"] !== \"\"){\r\n            vscode.workspace.getConfiguration().update(\"codetemplate.author\", varMap[\"AUTHOR\"], true);\r\n        }\r\n\r\n        for (let t of config.template) {\r\n            switch (t.type) {\r\n                case \"file\":\r\n                    await this.handleOneFile(srcUri, t.name, varMap, outputUri);\r\n                    break;\r\n                case \"dir\":\r\n                    await this.handleDir(vscode.Uri.joinPath(srcUri, t.name), varMap, outputUri);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    getPanel(){\r\n        return this._panel;\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\nexport default CodeTemplate;","module.exports = require(\"vscode\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport CodeTemplate from './plugin';\n\n\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\n\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"codetemplate\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\n\tlet codeTemp: CodeTemplate | undefined = undefined;\n\n\tlet newcode = vscode.commands.registerCommand('codetemplate.newcode', (uri) => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\t// vscode.window.showInformationMessage('new code from CodeTemplate!');\n\n\t\tconst columnToShowIn = vscode.window.activeTextEditor\n\t\t\t? vscode.window.activeTextEditor.viewColumn\n\t\t\t: undefined;\n\n\t\tif (codeTemp) {\n\t\t\t// If we already have a panel, show it in the target column\n\t\t\tcodeTemp.getPanel()?.reveal(columnToShowIn);\n\t\t\tcodeTemp.setTagetDir(uri);\n\t\t\tcodeTemp.reEnterWebView()\n\t\t} else {\n\t\t\tcodeTemp = new CodeTemplate();\n\t\t\tcodeTemp.setTagetDir(uri);\n\t\t\tcodeTemp.createWebview(context);\n\n\t\t\tcodeTemp.getPanel()?.onDidDispose(\n\t\t\t\t() => {\n\t\t\t\t\tcodeTemp = undefined;\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\tcontext.subscriptions\n\t\t\t);\n\n\t\t}\n\t\n\t});\n\n\n\n\tcontext.subscriptions.push(newcode,);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() { }\n"],"names":["constructor","setTagetDir","targetDirUri","this","_targetDirUri","async","context","panel","vscode","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","cssUri","webview","asWebviewUri","Uri","joinPath","extensionUri","scriptUri","html","onDidReceiveMessage","message","event","openCodeTemplateFloder","openOutputFloder","readTagContent","tag","createTempate","catch","err","console","error","toString","showErrorMessage","_panel","dispose","showInformationMessage","msg","undefined","subscriptions","reEnterWebView","author","workspace","getConfiguration","get","postMessage","targetDir","path","readTemplateDir","fileUri","content","fs","readFile","JSON","parse","TextDecoder","decode","_dirUri","cObj","readConfigByUri","selected","showOpenDialog","canSelectMany","canSelectFiles","canSelectFolders","title","dirUri","setTimeout","update","file","dirs","readDirectory","rets","v","charAt","push","dirPath","String","isInvalidDir","readTemplateDirByString","log","vars","c","nextC","stringArr","state","contentLen","length","startIndex","i","substring","varName","hasOwnProperty","warn","join","outputUri","isExist","stat","srcDir","name","outputDir","firstLine","unt8Arr","warpIndex","indexOf","trim","newName","test","replaceVar","outputContent","checkFileIsExist","Error","writeFile","TextEncoder","encode","handleOneFile","handleDir","createParams","config","targetPath","varMap","srcUri","templatePath","t","template","type","getPanel","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","codeTemp","newcode","commands","registerCommand","uri","columnToShowIn","activeTextEditor","viewColumn","reveal","createWebview","onDidDispose"],"sourceRoot":""}